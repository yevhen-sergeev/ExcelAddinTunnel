{"version":3,"file":"functions.js","mappings":"yBA6FAA,gBAAgBC,UAAU,OApFnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAmFAH,gBAAgBC,UAAU,SA5EnB,SAAeG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAoEAL,gBAAgBC,UAAU,aApDnB,SACLY,EACAT,GAEA,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAwCAL,gBAAgBC,UAAU,OAhCnB,SAAoBc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IA6BAf,gBAAgBC,UAAU,gBArBnB,SAAsBiB,GAC3B,GAAIA,EAAI,IAAMC,OAAOC,UAAUF,GAC7B,MAAM,IAAIG,MAAM,yCAMlB,IAHA,IAAMP,EAAmB,GACrBQ,EAAY,EAEPC,EAAI,EAAGA,GAAKL,EAAGK,IACtBD,GAAaC,GAAK,EAClBT,EAAOU,KAAKF,GAGd,OAAOR,CACT,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(\n  incrementBy: number,\n  invocation: CustomFunctions.StreamingInvocation<number>\n): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Возвращает ряд факториалов от 0 до n.\n * @customfunction FACTORIALROW\n * @param {number} n Число, до которого считать факториалы\n * @returns {number[]} Ряд факториалов от 0 до n\n */\nexport function factorialRow(n: number): number[] {\n  if (n < 0 || !Number.isInteger(n)) {\n    throw new Error(\"Input must be a non-negative integer.\");\n  }\n\n  const result: number[] = [];\n  let factorial = 1;\n\n  for (let i = 0; i <= n; i++) {\n    factorial *= i || 1;\n    result.push(factorial);\n  }\n\n  return result;\n}\n\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"FACTORIALROW\", factorialRow);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","n","Number","isInteger","Error","factorial","i","push"],"sourceRoot":""}