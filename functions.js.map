{"version":3,"file":"functions.js","mappings":"yBAkGAA,gBAAgBC,UAAU,OAzFnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAwFAH,gBAAgBC,UAAU,SAjFnB,SAAeG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAyEAL,gBAAgBC,UAAU,aAzDnB,SACLY,EACAT,GAEA,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA6CAL,gBAAgBC,UAAU,OArCnB,SAAoBc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAkCAf,gBAAgBC,UAAU,gBA1BnB,SAAsBiB,GAG3B,GAFAF,QAAQC,IAAI,oBAAqBC,GAE7BA,EAAI,IAAMC,OAAOC,UAAUF,GAE7B,MADAF,QAAQK,MAAM,mDACR,IAAIC,MAAM,yCAMlB,IAHA,IAAMR,EAAqB,GACvBS,EAAY,EAEPC,EAAI,EAAGA,GAAKN,EAAGM,IACtBD,GAAaC,GAAK,EAClBV,EAAOW,KAAK,CAACF,IACbP,QAAQC,IAAI,aAADS,OAAcF,EAAC,OAAAE,OAAMH,IAIlC,OADAP,QAAQC,IAAI,aAAcH,GACnBA,CACT,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\r\n\r\n/**\r\n * Adds two numbers.\r\n * @customfunction\r\n * @param first First number\r\n * @param second Second number\r\n * @returns The sum of the two numbers.\r\n */\r\nexport function add(first: number, second: number): number {\r\n  return first + second;\r\n}\r\n\r\n/**\r\n * Displays the current time once a second.\r\n * @customfunction\r\n * @param invocation Custom function handler\r\n */\r\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\r\n  const timer = setInterval(() => {\r\n    const time = currentTime();\r\n    invocation.setResult(time);\r\n  }, 1000);\r\n\r\n  invocation.onCanceled = () => {\r\n    clearInterval(timer);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current time.\r\n * @returns String with the current time formatted for the current locale.\r\n */\r\nexport function currentTime(): string {\r\n  return new Date().toLocaleTimeString();\r\n}\r\n\r\n/**\r\n * Increments a value once a second.\r\n * @customfunction\r\n * @param incrementBy Amount to increment\r\n * @param invocation Custom function handler\r\n */\r\nexport function increment(\r\n  incrementBy: number,\r\n  invocation: CustomFunctions.StreamingInvocation<number>\r\n): void {\r\n  let result = 0;\r\n  const timer = setInterval(() => {\r\n    result += incrementBy;\r\n    invocation.setResult(result);\r\n  }, 1000);\r\n\r\n  invocation.onCanceled = () => {\r\n    clearInterval(timer);\r\n  };\r\n}\r\n\r\n/**\r\n * Writes a message to console.log().\r\n * @customfunction LOG\r\n * @param message String to write.\r\n * @returns String to write.\r\n */\r\nexport function logMessage(message: string): string {\r\n  console.log(message);\r\n\r\n  return message;\r\n}\r\n\r\n/**\r\n * Возвращает ряд факториалов от 0 до n.\r\n * @customfunction FACTORIALROW\r\n * @param {number} n Число, до которого считать факториалы\r\n * @returns {number[][]} Ряд факториалов от 0 до n (в виде вертикального массива)\r\n */\r\nexport function factorialRow(n: number): number[][] {\r\n  console.log(\"Входное значение:\", n);\r\n\r\n  if (n < 0 || !Number.isInteger(n)) {\r\n    console.error(\"Ошибка: введено отрицательное или нецелое число\");\r\n    throw new Error(\"Input must be a non-negative integer.\");\r\n  }\r\n\r\n  const result: number[][] = [];\r\n  let factorial = 1;\r\n\r\n  for (let i = 0; i <= n; i++) {\r\n    factorial *= i || 1;\r\n    result.push([factorial]);\r\n    console.log(`Факториал ${i} = ${factorial}`);\r\n  }\r\n\r\n  console.log(\"Результат:\", result);\r\n  return result;\r\n}\r\n\r\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"FACTORIALROW\", factorialRow);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","n","Number","isInteger","error","Error","factorial","i","push","concat"],"sourceRoot":""}