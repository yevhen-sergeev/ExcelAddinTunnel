{"version":3,"file":"functions.js","mappings":"gBAAMA,EAA0C,IAAIC,IAqDpDC,gBAAgBC,UAAU,gBA7C1B,SAAsBC,GAGlB,GAFAC,QAAQC,IAAI,eAAgBF,GAExBA,EAAI,IAAMG,OAAOC,UAAUJ,GAC3B,MAAM,IAAIK,MAAM,yCAEf,GAAIL,EAAI,IACT,MAAM,IAAIK,MAAM,gCAGpB,IAGIC,EAHEC,EAAkCC,aAAaC,QAAQ,mBAEvDC,EAAY,GAAHC,OAAMX,EAAC,KAAAW,OAAIJ,GAM1B,GAHAN,QAAQC,IAAI,gDAAiDK,GAGzDX,EAAegB,IAAIF,GACnBJ,EAAUV,EAAeiB,IAAIH,GAC7BT,QAAQC,IAAI,8BAA+BI,OAE1C,CAID,IAHA,IAAMQ,EAAyB,GAC3BC,EAAoBC,OAAO,GAEtBC,EAAI,EAAGA,GAAKjB,EAAGiB,IACpBF,GAAaC,OAAOC,GACpBH,EAAaI,KAAKH,EAAUI,YAI5Bb,EADqB,QAArBC,EACU,CAACO,GAGDA,EAAaM,KAAI,SAAAC,GAAG,MAAI,CAACA,EAAI,IAG3CzB,EAAe0B,IAAIZ,EAAWJ,GAE9BL,QAAQC,IAAI,qBAAsBI,EACtC,CAEA,OAAOA,CACX,K","sources":["webpack://window.CustomFunctions/./src/functions/functions.ts"],"sourcesContent":["const factorialCache: Map<string, string[][]> = new Map();\r\n\r\n/**\r\n * Return row of factorial from 0 to n.\r\n * @customfunction FACTORIALROW\r\n * @param {number} n\r\n * @returns {string[][]}\r\n */\r\nfunction factorialRow(n: number): string[][] {\r\n    console.log(\"Enter value:\", n);\r\n\r\n    if (n < 0 || !Number.isInteger(n)) {\r\n        throw new Error(\"Input must be a non-negative integer.\");\r\n    }\r\n    else if (n > 500) {\r\n        throw new Error(\"Input must be less then 500.\");\r\n    }\r\n\r\n    const lOrientationMode: string | null = localStorage.getItem(\"orientationMode\");\r\n    // Create key from n and mode\r\n    const lCacheKey = `${n}_${lOrientationMode}`;\r\n    let lResult: string[][];\r\n\r\n    console.log(\"OrientationMode in factorialRow from storage:\", lOrientationMode);\r\n\r\n    // Return calculated result from cache\r\n    if (factorialCache.has(lCacheKey)) {\r\n        lResult = factorialCache.get(lCacheKey)!;\r\n        console.log(\"Result from factorialCache:\", lResult);\r\n    }\r\n    else {\r\n        const lResultArray: string[] = [];\r\n        let factorial: bigint = BigInt(1);\r\n\r\n        for (let i = 1; i <= n; i++) {\r\n            factorial *= BigInt(i);\r\n            lResultArray.push(factorial.toString());\r\n        }\r\n\r\n        if (lOrientationMode === \"row\") {\r\n            lResult = [lResultArray];\r\n        }\r\n        else {\r\n            lResult = lResultArray.map(val => [val]);\r\n        }\r\n\r\n        factorialCache.set(lCacheKey, lResult);\r\n\r\n        console.log(\"Calculated result:\", lResult);\r\n    }\r\n\r\n    return lResult;\r\n}\nCustomFunctions.associate(\"FACTORIALROW\", factorialRow);"],"names":["factorialCache","Map","CustomFunctions","associate","n","console","log","Number","isInteger","Error","lResult","lOrientationMode","localStorage","getItem","lCacheKey","concat","has","get","lResultArray","factorial","BigInt","i","push","toString","map","val","set"],"sourceRoot":""}