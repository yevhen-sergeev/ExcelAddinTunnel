{"version":3,"file":"functions.bundle.js","mappings":"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","sources":["webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/./src/functions/functions.ts","webpack://excel-custom-functions/webpack/runtime/define property getters","webpack://excel-custom-functions/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/* global clearInterval, console, CustomFunctions, setInterval */\r\n\r\n/**\r\n * Adds two numbers.\r\n * @customfunction\r\n * @param first First number\r\n * @param second Second number\r\n * @returns The sum of the two numbers.\r\n */\r\nexport function add(first: number, second: number): number {\r\n  return first + second;\r\n}\r\n\r\n/**\r\n * Displays the current time once a second.\r\n * @customfunction\r\n * @param invocation Custom function handler\r\n */\r\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\r\n  const timer = setInterval(() => {\r\n    const time = currentTime();\r\n    invocation.setResult(time);\r\n  }, 1000);\r\n\r\n  invocation.onCanceled = () => {\r\n    clearInterval(timer);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current time.\r\n * @returns String with the current time formatted for the current locale.\r\n */\r\nexport function currentTime(): string {\r\n  return new Date().toLocaleTimeString();\r\n}\r\n\r\n/**\r\n * Increments a value once a second.\r\n * @customfunction\r\n * @param incrementBy Amount to increment\r\n * @param invocation Custom function handler\r\n */\r\nexport function increment(\r\n  incrementBy: number,\r\n  invocation: CustomFunctions.StreamingInvocation<number>\r\n): void {\r\n  let result = 0;\r\n  const timer = setInterval(() => {\r\n    result += incrementBy;\r\n    invocation.setResult(result);\r\n  }, 1000);\r\n\r\n  invocation.onCanceled = () => {\r\n    clearInterval(timer);\r\n  };\r\n}\r\n\r\n/**\r\n * Writes a message to console.log().\r\n * @customfunction LOG\r\n * @param message String to write.\r\n * @returns String to write.\r\n */\r\nexport function logMessage(message: string): string {\r\n  console.log(message);\r\n\r\n  return message;\r\n}\r\n\r\nconst factorialCache: Map<string, string[][]> = new Map();\r\n\r\n/**\r\n * Возвращает ряд факториалов от 0 до n.\r\n * @customfunction FACTORIALROW\r\n * @param {number} n Число, до которого считать факториалы\r\n * @returns {Promise<string[][]>} Ряд факториалов от 0 до n (в виде вертикального массива)\r\n */\r\nexport async function factorialRow(n: number): Promise<string[][]> {\r\n    console.log(\"Входное значение:\", n);\r\n\r\n    if (n < 0 || !Number.isInteger(n)) {\r\n      console.error(\"Ошибка: введено отрицательное или нецелое число\");\r\n      throw new Error(\"Input must be a non-negative integer.\");\r\n    }\r\n    else if (n > 500) {\r\n      console.error(\"Ошибка: введено число больше 500\");\r\n      throw new Error(\"Input must be less then 500.\");\r\n    }\r\n\r\n    // const mode: string | null = await OfficeRuntime.storage.getItem('resultMode');\r\n    const mode: string | null = await OfficeRuntime.storage.getItem(\"orientationMode\");\r\n    console.log(\"Режим из storage:\", mode);\r\n    // Создание ключа из n и mode\r\n    const cacheKey = `${n}_${mode}`;\r\n\r\n    let result: string[][];\r\n\r\n    // Если значение уже вычислено, возвращаем его из кеша\r\n    if (factorialCache.has(cacheKey)) {\r\n      result = factorialCache.get(cacheKey)!;\r\n      console.log(\"Результат из factorialCache:\", result);\r\n    }\r\n    else {\r\n      const resultArray: string[] = [];\r\n      let factorial: bigint = BigInt(1);\r\n\r\n      for (let i = 1; i <= n; i++) {\r\n        factorial *= BigInt(i);\r\n        resultArray.push(factorial.toString());\r\n        //console.log(`Факториал ${i} = ${factorial}`);\r\n      }\r\n\r\n      if (mode === 'row') {\r\n        result = [resultArray]; // строка: одна строка, много колонок\r\n      }\r\n      else {\r\n        // колонка: много строк, одна колонка\r\n        result = resultArray.map(val => [val]);\r\n      }\r\n\r\n      factorialCache.set(cacheKey, result);\r\n\r\n      console.log(\"Результат:\", result);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/*\r\n*\r\n * Возвращает ряд факториалов от 0 до n\r\n * @customfunction FACTORIALROW_WORKER\r\n * @param {number} n Число, до которого считать факториалы\r\n * @returns {Promise<string[][]>} Ряд факториалов от 0 до n (в виде вертикального массива)\r\nexport async function factorialRowWorker(n: number): Promise<string[][]> {\r\n  console.log(\"FACTORIALROW called with n =\", n);\r\n\r\n  // Получаем режим из OfficeRuntime.storage\r\n  const mode = await OfficeRuntime.storage.getItem(\"orientationMode\") || \"row\";\r\n  console.log(\"Режим из storage в Worker:\", mode);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    // const worker = new Worker(\"https://yevhen-sergeev.github.io/ExcelAddinTunnel/factorialWorker.js\");\r\n    // const worker = new Worker(\"/factorialWorker.js\");\r\n    const isLocalhost = window.location.hostname === \"localhost\";\r\n\r\n    const worker = new Worker(\r\n        isLocalhost\r\n            ? \"/factorialWorker.js?cachebust=\" + Date.now() // локальная разработка\r\n            : \"https://yevhen-sergeev.github.io/ExcelAddinTunnel/factorialWorker.js\" // production\r\n    );\r\n    worker.onmessage = (event) => {\r\n      if (event.data.error) {\r\n        reject(event.data.error);\r\n      }\r\n      else {\r\n        resolve(event.data.result);\r\n      }\r\n      worker.terminate(); // завершение работы воркера\r\n    };\r\n\r\n    worker.onerror = (error) => {\r\n      reject(error.message);\r\n      worker.terminate(); // завершение работы воркера при ошибке\r\n    };\r\n\r\n    worker.postMessage({n, mode}); // Отправляем число `n` в Web Worker\r\n  });\r\n}*/\r\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"FACTORIALROW\", factorialRow);","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","exports","definition","key","get","obj","prop","hasOwnProperty","factorialCache","Map","_factorialRow","_callee","mode","cacheKey","result","resultArray","factorial","_context","console","log","Number","isInteger","error","Error","OfficeRuntime","storage","getItem","concat","has","BigInt","push","toString","map","val","set","arguments","apply","_next","_throw","CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","message","_x"],"sourceRoot":""}